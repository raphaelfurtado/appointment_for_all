// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  password_hash String
  provider      String   @default("user")
  phone         String?
  avatar        Files?   @relation(fields: [avatar_id], references: [id], onUpdate: Cascade, onDelete: SetNull)
  avatar_id     Int?     @map("avatar_id")
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  appointments_user Appointments[] @relation("user_appointments")

  appointments_provider Appointments[]         @relation("provider_appointments")
  employeeWorkSchedule  EmployeeWorkSchedule[]

  @@map("users")
}

model Files {
  id         Int      @id @default(autoincrement())
  name       String
  path       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Users      Users[]

  @@map("files")
}

model Appointments {
  id          Int       @id @default(autoincrement())
  date        DateTime
  canceled_at DateTime?
  price       Float
  observation String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  user_id Int?
  user    Users? @relation("user_appointments", fields: [user_id], references: [id])

  provider_id Int?
  provider    Users? @relation("provider_appointments", fields: [provider_id], references: [id])

  service    Services @relation(fields: [service_id], references: [id])
  service_id Int

  @@map("appointments")
}

model Notifications {
  id        Int      @id @default(autoincrement())
  user_id   Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model CategoryServices {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  active      Boolean
  services    Services[]
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@map("categoryServices")
}

model Services {
  id                Int              @id @default(autoincrement())
  name              String
  description       String?
  price             Float
  duration          Int
  categoryService   CategoryServices @relation(fields: [categoryServiceId], references: [id])
  categoryServiceId Int
  active      Boolean
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  appointments      Appointments[]

  @@map("services")
}

model EmployeeWorkSchedule {
  id         Int       @id @default(autoincrement())
  dayOfWeek  String // Pode ser uma enumeração ou número
  startTime  String
  endTime    String
  breakStart String?
  breakEnd   String?
  user       Users     @relation(fields: [userId], references: [id])
  userId     Int
}
